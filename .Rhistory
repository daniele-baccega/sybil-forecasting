?arima
?cubicspline
library(pracma)
?cubicspline
?smooth.spline
?bs
library(spline)
install.packages("spline")
install.packages("splines")
library(splines)
?bs
data <- data.frame(x=c(0, 7, 14, 21), y=c(5, 8, 20, 25))
plot(data)
spline_fit <- lm(data$y ~ bs(data$x, knots=c(0, 7, 14, 21)))
spline_fit
summary(spline_fit)
x_lim <- range(data$x)
x_grid <- seq(x_lim[1], x_lim[2])
preds <- predict(spline_fit, newdata=list(x=x_grid))
plot(data$x, data$y, cex=1.5, pch=19)
lines(x_grid, preds)
data <- data.frame(x=c(0, 7, 14, 21), y=c(5, 8, 20, 25))
spline_fit <- lm(data$y ~ bs(data$x, knots=c(0, 21)))
x_lim <- range(data$x)
x_grid <- c(0, 7, 14, 21)
preds <- predict(spline_fit, newdata=list(x=x_grid))
plot(data$x, data$y, cex=1.5, pch=19)
lines(x_grid, preds)
preds
?bs
lines(x_grid, preds)
preds
spline_fit <- lm(data$y ~ bs(data$x, knots=c(0, 7, 14, 21)))
x_grid <- seq(x_lim[1], x_lim[2])
preds <- predict(spline_fit, newdata=list(x=x_grid))
preds
?slipnefun
?splinefun
?approxfun
?splinefun
splinefun(data)
s <- splinefun(data)
s(1)
s(2)
lines(seq(0, 21), s(seq(0, 21)))
s <- splinefun(data, method = "hyman")
lines(seq(0, 21), s(seq(0, 21)))
s <- splinefun(data, method = "monoH.FC")
lines(seq(0, 21), s(seq(0, 21)))
lines(seq(0, 21), s(seq(0, 21)), col="red")
s <- splinefun(data, method = "hyman")
lines(seq(0, 21), s(seq(0, 21)), col="blue")
s <- splinefun(data)
lines(seq(0, 21), s(seq(0, 21)), col="green")
legend(legend = c("Original data", "fmm spline", "hyman spline", "monoH.FC spline"), col=c("black", "green", "blue", "red"))
legend(1, 95, legend = c("Original data", "fmm spline", "hyman spline", "monoH.FC spline"), col=c("black", "green", "blue", "red"))
legend(0, 0, legend = c("Original data", "fmm spline", "hyman spline", "monoH.FC spline"), col=c("black", "green", "blue", "red"))
legend(0, 25, legend = c("Original data", "fmm spline", "hyman spline", "monoH.FC spline"), col=c("black", "green", "blue", "red"))
legend(0, 25, legend = c("Original data", "fmm spline", "hyman spline", "monoH.FC spline"), col=c("black", "green", "blue", "red"), lty=1:2, cex=0.8)
ylim(0, 30)
library(splines)
data <- data.frame(x=c(0, 7, 14, 21), y=c(5, 8, 20, 25))
spline_fit <- lm(data$y ~ bs(data$x, knots=c(data$x)))
x_lim <- range(data$x)
x_grid <- data$x
preds <- predict(spline_fit, newdata=list(x=x_grid))
plot(data$x, data$y, ylim=c(0, 30), cex=1.5, pch=19)
lines(x_grid, preds)
s <- splinefun(data)
lines(seq(0, 21), s(seq(0, 21)), col="green")
s <- splinefun(data, method = "hyman")
lines(seq(0, 21), s(seq(0, 21)), col="blue")
s <- splinefun(data, method = "monoH.FC")
lines(seq(0, 21), s(seq(0, 21)), col="red")
legend(0, 30, legend = c("Original data", "fmm spline", "hyman spline", "monoH.FC spline"), col=c("black", "green", "blue", "red"), lty=1:2, cex=0.8)
library(splines)
data <- data.frame(x=c(0, 7, 14, 21), y=c(5, 8, 20, 25))
spline_fit <- lm(data$y ~ bs(data$x, knots=c(data$x)))
x_lim <- range(data$x)
x_grid <- data$x
preds <- predict(spline_fit, newdata=list(x=x_grid))
plot(data$x, data$y, ylim=c(3, 25), cex=1.5, pch=19)
lines(x_grid, preds)
s <- splinefun(data)
lines(seq(0, 21), s(seq(0, 21)), col="green")
s <- splinefun(data, method = "hyman")
lines(seq(0, 21), s(seq(0, 21)), col="blue")
s <- splinefun(data, method = "monoH.FC")
lines(seq(0, 21), s(seq(0, 21)), col="red")
legend(3, 25, legend = c("Original data", "fmm spline", "hyman spline", "monoH.FC spline"), col=c("black", "green", "blue", "red"), lty=1:2, cex=0.8)
library(splines)
data <- data.frame(x=c(0, 7, 14, 21), y=c(5, 8, 20, 25))
spline_fit <- lm(data$y ~ bs(data$x, knots=c(data$x)))
x_lim <- range(data$x)
x_grid <- data$x
preds <- predict(spline_fit, newdata=list(x=x_grid))
plot(data$x, data$y, ylim=c(5, 25), cex=1.5, pch=19)
lines(x_grid, preds)
s <- splinefun(data)
lines(seq(0, 21), s(seq(0, 21)), col="green")
s <- splinefun(data, method = "hyman")
lines(seq(0, 21), s(seq(0, 21)), col="blue")
s <- splinefun(data, method = "monoH.FC")
lines(seq(0, 21), s(seq(0, 21)), col="red")
legend(0, 25, legend = c("Original data", "fmm spline", "hyman spline", "monoH.FC spline"), col=c("black", "green", "blue", "red"), lty=1:2, cex=0.8)
library(splines)
data <- data.frame(x=c(0, 7, 14, 21), y=c(5, 8, 20, 25))
spline_fit <- lm(data$y ~ bs(data$x, knots=c(data$x)))
x_lim <- range(data$x)
x_grid <- data$x
preds <- predict(spline_fit, newdata=list(x=x_grid))
plot(data$x, data$y, ylim=c(4, 25), cex=1.5, pch=19)
lines(x_grid, preds)
s <- splinefun(data)
lines(seq(0, 21), s(seq(0, 21)), col="green")
s <- splinefun(data, method = "hyman")
lines(seq(0, 21), s(seq(0, 21)), col="blue")
s <- splinefun(data, method = "monoH.FC")
lines(seq(0, 21), s(seq(0, 21)), col="red")
legend(0, 25, legend = c("Original data", "fmm spline", "hyman spline", "monoH.FC spline"), col=c("black", "green", "blue", "red"), lty=1:2, cex=0.8)
library(splines)
data <- data.frame(x=c(0, 7, 14, 21), y=c(5, 8, 20, 25))
spline_fit <- lm(data$y ~ bs(data$x, knots=c(data$x)))
x_lim <- range(data$x)
x_grid <- data$x
preds <- predict(spline_fit, newdata=list(x=x_grid))
plot(data$x, data$y, ylim=c(4, 25), cex=1.5, pch=19)
lines(x_grid, preds)
s <- splinefun(data)
lines(seq(0, 21), s(seq(0, 21)), col="green")
s <- splinefun(data, method = "hyman")
lines(seq(0, 21), s(seq(0, 21)), col="blue")
s <- splinefun(data, method = "monoH.FC")
lines(seq(0, 21), s(seq(0, 21)), col="red")
legend(0, 25, legend = c("Original data", "fmm spline", "hyman spline", "monoH.FC spline"), col=c("black", "green", "blue", "red"), lty=1:2, cex=0.8)
install.packages("patchwork")
install.packages("COVID-19")
install.packages("COVID19")
load("~/Desktop/PhD/Forecasting/Forecasting/.RData")
View(df_COVID19_ref_init)
x <- covid19(country = "Italy", level = 3, start = "2020-01-01", dir = '.')
library(COVID19)
x <- covid19(country = "Italy", level = 3, start = "2020-01-01", dir = '.')
x
View(x)
library(devtools)
install_github("https://github.com/qBioTurin/epimod", ref="master")
library(devtools)
install_github("https://github.com/qBioTurin/epimod", ref="master", force = TRUE)
load("~/Desktop/PhD/Forecasting/Forecasting/.RData")
View(results_all)
View(SIRD_all)
?covid19
library(COVID19)
?covid19
as.Date("2023-05-31", format="%y-%U")
format("2023-05-31", format="%y-%U")
format("2023-05-31", format="%y")
format("2023-05-31", "%y")
format("2023-05-31", "%G")
lubridate::format("2023-05-31", "%G")
library(lubridate)
lubridate::format("2023-05-31", "%G")
format("2023-05-31", "%G")
format("2023-05-31", format="%G")
format("2023-05-31", format="%y")
format(as.Date("2023-05-31"), format="%y")
format(as.Date("2023-05-31"), format="%Y")
format(as.Date("2023-05-31"), format="%Y-%U")
format(as.Date("2023-05-31"), format="%Y-%u")
# Include the common functions
source(paste0("common_functions.R"))
setwd("~/Desktop/PhD/prophet-forecasting")
# Include the common functions
source(paste0("common_functions.R"))
Sys.setlocale("LC_TIME", "en_US.UTF-8")
# Select the configuration (with or without variants)
# To reproduce the results set the variable to TRUE
variants <- TRUE
# Global final date
# To reproduce the results set the variable to 2023-06-05
global_final_date <- "2023-06-05"
# Select the country
# To reproduce the results set the variable to Italy
country <- "Italy"
who_labels <- TRUE
# Download file and load data
data <- download_files_and_load_data(country, who_labels, global_final_date)
library(dplyr)
library(ggplot2)
library(zoo)
library(forecast)
library(COVID19)
library(prophet)
library(stringr)
library(scales)
library(patchwork)
# Download file and load data
data <- download_files_and_load_data(country, who_labels, global_final_date)
df_COVID19_ref_init <- data[[1]]
df_variants_init <- data[[2]]
updated_file <- data[[3]]
View(df_COVID19_ref_init)
View(df_variants_init)
# Import the necessary libraries
library(dplyr)
library(ggplot2)
library(zoo)
library(forecast)
library(COVID19)
library(prophet)
library(stringr)
library(scales)
library(patchwork)
# Include the common functions
source(paste0("common_functions.R"))
Sys.setlocale("LC_TIME", "en_US.UTF-8")
# Select the configuration (with or without variants)
# To reproduce the results set the variable to TRUE
variants <- TRUE
# Global final date
# To reproduce the results set the variable to 2023-06-04
global_final_date <- "2023-06-04"
# Select the country
# To reproduce the results set the variable to Italy
country <- "Italy"
# Download file and load data
data <- download_files_and_load_data(country, who_labels, global_final_date)
df_COVID19_ref_init <- data[[1]]
df_variants_init <- data[[2]]
updated_file <- data[[3]]
View(data)
View(df_COVID19_ref_init)
View(df_variants_init)
